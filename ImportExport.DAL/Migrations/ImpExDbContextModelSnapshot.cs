// <auto-generated />
using System;
using ImportExport.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ImportExport.DAL.Migrations
{
    [DbContext(typeof(ImpExDbContext))]
    partial class ImpExDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ImportExport.Model.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ImportExport.Model.Car", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("DealerID")
                        .HasColumnType("int");

                    b.Property<string>("Fuel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("FuelConsumption")
                        .HasColumnType("real");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("PreviousOwners")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DealerID");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DealerID = 1,
                            Fuel = "Gasoline",
                            FuelConsumption = 8.4f,
                            Make = "Nissan",
                            Mileage = 98000,
                            Model = "S15",
                            Power = 250,
                            PreviousOwners = 2,
                            Price = 24000,
                            Transmission = "Manual",
                            Year = "2002"
                        },
                        new
                        {
                            ID = 2,
                            DealerID = 2,
                            Fuel = "Gasoline",
                            FuelConsumption = 10.2f,
                            Make = "BMW",
                            Mileage = 75000,
                            Model = "M3",
                            Power = 425,
                            PreviousOwners = 1,
                            Price = 45000,
                            Transmission = "Manual",
                            Year = "2016"
                        },
                        new
                        {
                            ID = 3,
                            DealerID = 3,
                            Fuel = "Diesel",
                            FuelConsumption = 6.8f,
                            Make = "Audi",
                            Mileage = 55000,
                            Model = "A4",
                            Power = 190,
                            PreviousOwners = 1,
                            Price = 32000,
                            Transmission = "Automatic",
                            Year = "2018"
                        },
                        new
                        {
                            ID = 4,
                            DealerID = 4,
                            Fuel = "Gasoline",
                            FuelConsumption = 9.5f,
                            Make = "Mercedes-Benz",
                            Mileage = 80000,
                            Model = "E-Class",
                            Power = 320,
                            PreviousOwners = 2,
                            Price = 38000,
                            Transmission = "Automatic",
                            Year = "2015"
                        },
                        new
                        {
                            ID = 5,
                            DealerID = 1,
                            Fuel = "Diesel",
                            FuelConsumption = 5.7f,
                            Make = "Volkswagen",
                            Mileage = 65000,
                            Model = "Passat",
                            Power = 150,
                            PreviousOwners = 1,
                            Price = 25000,
                            Transmission = "Automatic",
                            Year = "2017"
                        },
                        new
                        {
                            ID = 6,
                            DealerID = 2,
                            Fuel = "Gasoline",
                            FuelConsumption = 6.2f,
                            Make = "Ford",
                            Mileage = 70000,
                            Model = "Focus",
                            Power = 125,
                            PreviousOwners = 1,
                            Price = 18000,
                            Transmission = "Manual",
                            Year = "2019"
                        },
                        new
                        {
                            ID = 7,
                            DealerID = 3,
                            Fuel = "Hybrid",
                            FuelConsumption = 4.5f,
                            Make = "Toyota",
                            Mileage = 40000,
                            Model = "Corolla",
                            Power = 120,
                            PreviousOwners = 1,
                            Price = 22000,
                            Transmission = "Automatic",
                            Year = "2020"
                        },
                        new
                        {
                            ID = 8,
                            DealerID = 4,
                            Fuel = "Gasoline",
                            FuelConsumption = 6.5f,
                            Make = "Honda",
                            Mileage = 50000,
                            Model = "Civic",
                            Power = 150,
                            PreviousOwners = 1,
                            Price = 20000,
                            Transmission = "Manual",
                            Year = "2018"
                        },
                        new
                        {
                            ID = 9,
                            DealerID = 1,
                            Fuel = "Diesel",
                            FuelConsumption = 5.8f,
                            Make = "Hyundai",
                            Mileage = 60000,
                            Model = "i30",
                            Power = 110,
                            PreviousOwners = 1,
                            Price = 19000,
                            Transmission = "Manual",
                            Year = "2017"
                        },
                        new
                        {
                            ID = 10,
                            DealerID = 1,
                            Fuel = "Gasoline",
                            FuelConsumption = 5.2f,
                            Make = "Renault",
                            Mileage = 45000,
                            Model = "Clio",
                            Power = 100,
                            PreviousOwners = 1,
                            Price = 15000,
                            Transmission = "Manual",
                            Year = "2019"
                        },
                        new
                        {
                            ID = 11,
                            DealerID = 3,
                            Fuel = "Gasoline",
                            FuelConsumption = 6.2f,
                            Make = "Renault",
                            Mileage = 85000,
                            Model = "Megane",
                            Power = 150,
                            PreviousOwners = 2,
                            Price = 22000,
                            Transmission = "Manual",
                            Year = "2019"
                        });
                });

            modelBuilder.Entity("ImportExport.Model.Dealer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable("Dealers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "rpm@info.com",
                            LocationID = 1,
                            Name = "RPM Cars",
                            PhoneNumber = "8395994874"
                        },
                        new
                        {
                            ID = 2,
                            Email = "autohaus@example.com",
                            LocationID = 2,
                            Name = "AutoHaus",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            ID = 3,
                            Email = "carcenter@example.com",
                            LocationID = 3,
                            Name = "CarCenter",
                            PhoneNumber = "0987654321"
                        },
                        new
                        {
                            ID = 4,
                            Email = "carworld@example.com",
                            LocationID = 4,
                            Name = "CarWorld",
                            PhoneNumber = "5555555555"
                        });
                });

            modelBuilder.Entity("ImportExport.Model.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Alexanderplatz 1",
                            City = "Berlin",
                            Country = "Germany"
                        },
                        new
                        {
                            ID = 2,
                            Address = "Gamla stan",
                            City = "Stockholm",
                            Country = "Sweden"
                        },
                        new
                        {
                            ID = 3,
                            Address = "Dam Square",
                            City = "Amsterdam",
                            Country = "Netherlands"
                        },
                        new
                        {
                            ID = 4,
                            Address = "Grand Place",
                            City = "Brussels",
                            Country = "Belgium"
                        });
                });

            modelBuilder.Entity("ImportExport.Model.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("DealerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CarID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ImportExport.Model.Car", b =>
                {
                    b.HasOne("ImportExport.Model.Dealer", "Dealer")
                        .WithMany("Cars")
                        .HasForeignKey("DealerID");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("ImportExport.Model.Dealer", b =>
                {
                    b.HasOne("ImportExport.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ImportExport.Model.Order", b =>
                {
                    b.HasOne("ImportExport.Model.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ImportExport.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ImportExport.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImportExport.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ImportExport.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImportExport.Model.Dealer", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
